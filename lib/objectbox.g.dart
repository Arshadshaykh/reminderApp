// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5839166201501930632),
      name: 'Alarm',
      lastPropertyId: const obx_int.IdUid(7, 5697419954113333738),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 239525046679328489),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5233474580023615124),
            name: 'notiId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7697032147630857417),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2076024412038738326),
            name: 'time',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7298116340143756502),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 686626334474270425),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5697419954113333738),
            name: 'isRepeat',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7140114935541266141),
      name: 'Note',
      lastPropertyId: const obx_int.IdUid(4, 8177421582254201672),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6319600187328506550),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3148187689653382137),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8520754225297548494),
            name: 'comment',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8177421582254201672),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3213137160174948915),
      name: 'Todo',
      lastPropertyId: const obx_int.IdUid(5, 7116727272606252807),
      flags: 2,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4310671167616246686),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9109998538391837803),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1854785477045985947),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4219024881139538478),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7116727272606252807),
            name: 'color',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 3213137160174948915),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Alarm: obx_int.EntityDefinition<Alarm>(
        model: _entities[0],
        toOneRelations: (Alarm object) => [],
        toManyRelations: (Alarm object) => {},
        getId: (Alarm object) => object.id,
        setId: (Alarm object, int id) {
          object.id = id;
        },
        objectToFB: (Alarm object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final timeOffset =
              object.time == null ? null : fbb.writeString(object.time!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.notiId);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, timeOffset);
          fbb.addInt64(4, object.date?.millisecondsSinceEpoch);
          fbb.addBool(5, object.isActive);
          fbb.addBool(6, object.isRepeat);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final timeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final notiIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final dateParam = dateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateValue);
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final isRepeatParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final object = Alarm(
              id: idParam,
              title: titleParam,
              time: timeParam,
              notiId: notiIdParam,
              date: dateParam,
              isActive: isActiveParam,
              isRepeat: isRepeatParam);

          return object;
        }),
    Note: obx_int.EntityDefinition<Note>(
        model: _entities[1],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, commentOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final commentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = Note(textParam,
              id: idParam, comment: commentParam, date: dateParam);

          return object;
        }),
    Todo: obx_int.EntityDefinition<Todo>(
        model: _entities[2],
        toOneRelations: (Todo object) => [],
        toManyRelations: (Todo object) => {},
        getId: (Todo object) => object.id,
        setId: (Todo object, int id) {
          object.id = id;
        },
        objectToFB: (Todo object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final dateOffset = fbb.writeString(object.date);
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, dateOffset);
          fbb.addOffset(4, colorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Todo(
              idParam, titleParam, descriptionParam, dateParam, colorParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Alarm] entity fields to define ObjectBox queries.
class Alarm_ {
  /// see [Alarm.id]
  static final id = obx.QueryIntegerProperty<Alarm>(_entities[0].properties[0]);

  /// see [Alarm.notiId]
  static final notiId =
      obx.QueryIntegerProperty<Alarm>(_entities[0].properties[1]);

  /// see [Alarm.title]
  static final title =
      obx.QueryStringProperty<Alarm>(_entities[0].properties[2]);

  /// see [Alarm.time]
  static final time =
      obx.QueryStringProperty<Alarm>(_entities[0].properties[3]);

  /// see [Alarm.date]
  static final date = obx.QueryDateProperty<Alarm>(_entities[0].properties[4]);

  /// see [Alarm.isActive]
  static final isActive =
      obx.QueryBooleanProperty<Alarm>(_entities[0].properties[5]);

  /// see [Alarm.isRepeat]
  static final isRepeat =
      obx.QueryBooleanProperty<Alarm>(_entities[0].properties[6]);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = obx.QueryIntegerProperty<Note>(_entities[1].properties[0]);

  /// see [Note.text]
  static final text = obx.QueryStringProperty<Note>(_entities[1].properties[1]);

  /// see [Note.comment]
  static final comment =
      obx.QueryStringProperty<Note>(_entities[1].properties[2]);

  /// see [Note.date]
  static final date = obx.QueryDateProperty<Note>(_entities[1].properties[3]);
}

/// [Todo] entity fields to define ObjectBox queries.
class Todo_ {
  /// see [Todo.id]
  static final id = obx.QueryIntegerProperty<Todo>(_entities[2].properties[0]);

  /// see [Todo.title]
  static final title =
      obx.QueryStringProperty<Todo>(_entities[2].properties[1]);

  /// see [Todo.description]
  static final description =
      obx.QueryStringProperty<Todo>(_entities[2].properties[2]);

  /// see [Todo.date]
  static final date = obx.QueryStringProperty<Todo>(_entities[2].properties[3]);

  /// see [Todo.color]
  static final color =
      obx.QueryStringProperty<Todo>(_entities[2].properties[4]);
}
